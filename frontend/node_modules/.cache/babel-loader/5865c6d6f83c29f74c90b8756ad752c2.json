{"ast":null,"code":"var _jsxFileName = \"/Users/Deninod/Python/Final_project/TireShield/frontend/src/components_react/Weather/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState, useEffect } from 'react';\nimport Login from '../../components/Login';\nimport { FirebaseContext } from '../Firebase';\nimport { AuthUserContext, withAuthorization } from '../Session';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WeatherPage() {\n  _s();\n\n  const [weather, setWeather] = useState({});\n  const [userLocation, setUserLocation] = useState({});\n  const [currentLocation, setCurrentLocation] = useState(\"\");\n  const userId = useContext(FirebaseContext).auth.currentUser.uid;\n  useEffect(() => {\n    navigator.geolocation.getCurrentPosition(position => {\n      let coordinates = position.coords;\n      setCurrentLocation(coordinates);\n      console.log(coordinates);\n    }, err => {\n      console.warn(`Error(${err.code}): ${err.message}`);\n    }, {\n      enableHighAccuracy: true,\n      timeout: 5000,\n      maximumAge: 0\n    });\n  }, []);\n  useEffect(() => {\n    async function fetchData(APIName, position, stateFunction) {\n      let lat = position.latitude;\n      let lon = position.longitude;\n      let APICall;\n\n      switch (APIName) {\n        case \"oneCall\":\n          APICall = `https://api.openweathermap.org/data/2.5/weather?lat=40.71&lon=-74.00&dt=20215101619&units=imperial&lang=en&appid=6693af864d042d45210a62d91db9b718`;\n          break;\n\n        case \"reverseGeocoding\":\n          APICall = `https://maps.googleapis.com/maps/api/geocode/json?latlng=40.71,-74.00&key=AIzaSyC98mWMfSiEOhKrhwhN04WW2dKb_2lT_QY`;\n          break;\n\n        default:\n          APICall = \"\";\n          break;\n      }\n\n      ;\n      let response = await fetch(APICall);\n      let data = await response.json();\n      APIName === \"reverseGeocoding\" ? stateFunction(data.results[0].address_components) : stateFunction(data);\n      console.log(data);\n    }\n\n    ;\n\n    if (typeof currentLocation.latitude != \"undefined\") {\n      fetchData(\"oneCall\", currentLocation, setWeather);\n      fetchData(\"reverseGeocoding\", currentLocation, setUserLocation);\n    }\n\n    ;\n  }, [currentLocation]); // async function getWeather() {\n  // navigator.geolocation.getCurrentPosition(\n  //         function(location) { console.log(location) }\n  //     )\n  // const configs = {\n  //     method: 'get',\n  //     data: JSON.stringify({}),\n  //     headers: {\"Content-Type\": \"application/json\"}\n  // function getPosition(location) {\n  //     return location\n  // }\n  // const location = await navigator.geolocation.getCurrentPosition(getPosition, getError)\n  // console.log(location)\n  // const location = await fetch (navigator.geolocation.getCurrentPosition(\n  //     function(location) { console.log(location) }\n  // ))\n  // async function getPosition(location) {\n  //     return location\n  // }\n  // function getError(error) {\n  //     return console.log(error)\n  // }\n  //     const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=40.71&lon=-74.00&dt=20215101619&lang=en&appid=6693af864d042d45210a62d91db9b718`);\n  //     const userWeather = await response.json();\n  //     console.log(userWeather)\n  //     setWeather(userWeather);\n  // if (response.status === 200) {\n  //     return { success: true, data: response.json() };\n  // }\n  // return {success: false, error: response.statusText };\n  //     const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=40.71,-74.00&key=AIzaSyC98mWMfSiEOhKrhwhN04WW2dKb_2lT_QY`);\n  //     const userLocation = await response.json();\n  //     console.log(userLocation)\n  //     setUserLocation(userLocation);\n  // }\n  // useEffect (() => getWeather(), []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"weathermain\",\n      children: \"Current 5 Day Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Current Weather Conditions\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"openweathermap-widget-11\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      src: \"//openweathermap.org/themes/openweathermap/assets/vendor/owm/js/d3.min.js\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n      children: [\" window.myWidgetParam ? window.myWidgetParam : window.myWidgetParam = []; window.myWidgetParam.push(\", (id = 11, cityid = '5128581', appid = '6693af864d042d45210a62d91db9b718', units = 'imperial', containerid = 'openweathermap-widget-11'), \"); (function() let script = document.createElement('script'); script.async = true;script.charset = \\\"utf-8\\\"; script.src = \\\"//openweathermap.org/themes/openweathermap/assets/vendor/owm/js/weather-widget-generator.js\\\"; var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(script, s); )();\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WeatherPage, \"6LQhPkA6v/j2TlTXijWl4EkQNsc=\");\n\n_c = WeatherPage;\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(WeatherPage);\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherPage\");","map":{"version":3,"sources":["/Users/Deninod/Python/Final_project/TireShield/frontend/src/components_react/Weather/index.js"],"names":["React","useContext","useState","useEffect","Login","FirebaseContext","AuthUserContext","withAuthorization","WeatherPage","weather","setWeather","userLocation","setUserLocation","currentLocation","setCurrentLocation","userId","auth","currentUser","uid","navigator","geolocation","getCurrentPosition","position","coordinates","coords","console","log","err","warn","code","message","enableHighAccuracy","timeout","maximumAge","fetchData","APIName","stateFunction","lat","latitude","lon","longitude","APICall","response","fetch","data","json","results","address_components","id","cityid","appid","units","containerid","condition","authUser"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from 'react';\nimport Login from '../../components/Login';\nimport { FirebaseContext } from '../Firebase';\nimport { AuthUserContext, withAuthorization } from '../Session';\n\nfunction WeatherPage() {\n    const[weather, setWeather] = useState({});\n    const[userLocation, setUserLocation] = useState({});\n    const[currentLocation, setCurrentLocation] = useState(\"\");\n\n\n\n    const userId = useContext(FirebaseContext).auth.currentUser.uid \n\n    useEffect(() => {\n        navigator.geolocation.getCurrentPosition((position) => {\n            let coordinates = position.coords;\n            setCurrentLocation(coordinates);\n            console.log(coordinates)\n        }, (err) => {\n            console.warn(`Error(${err.code}): ${err.message}`);\n        }, {\n            enableHighAccuracy: true,\n            timeout: 5000,\n            maximumAge: 0\n        });\n    }, []);\n\n    useEffect(() => {\n        async function fetchData(APIName, position, stateFunction) {\n            let lat = position.latitude;\n            let lon = position.longitude;\n            let APICall;\n\n            switch (APIName) {\n                case \"oneCall\":\n                    APICall = `https://api.openweathermap.org/data/2.5/weather?lat=40.71&lon=-74.00&dt=20215101619&units=imperial&lang=en&appid=6693af864d042d45210a62d91db9b718`;\n                    \n                    break;\n\n                case \"reverseGeocoding\":\n                    APICall = `https://maps.googleapis.com/maps/api/geocode/json?latlng=40.71,-74.00&key=AIzaSyC98mWMfSiEOhKrhwhN04WW2dKb_2lT_QY`;\n\n                    break;\n\n                default:\n                    APICall = \"\";\n                    break;\n\n            };\n            \n\n            let response = await fetch(APICall);\n            let data = await response.json();\n            APIName === \"reverseGeocoding\" ?\n            stateFunction(data.results[0].address_components) :\n            stateFunction(data);\n            console.log(data);\n        };\n        \n\n        if (typeof currentLocation.latitude != \"undefined\") {\n            fetchData(\"oneCall\", currentLocation, setWeather);\n            fetchData(\"reverseGeocoding\", currentLocation, setUserLocation);\n        };\n\n\n        }, [currentLocation]);\n\n\n    // async function getWeather() {\n\n    // navigator.geolocation.getCurrentPosition(\n    //         function(location) { console.log(location) }\n    //     )\n        // const configs = {\n        //     method: 'get',\n        //     data: JSON.stringify({}),\n        //     headers: {\"Content-Type\": \"application/json\"}\n    \n    \n    // function getPosition(location) {\n    //     return location\n    // }\n    // const location = await navigator.geolocation.getCurrentPosition(getPosition, getError)\n    // console.log(location)\n\n    // const location = await fetch (navigator.geolocation.getCurrentPosition(\n    //     function(location) { console.log(location) }\n    // ))\n\n    // async function getPosition(location) {\n    //     return location\n    // }\n\n    // function getError(error) {\n    //     return console.log(error)\n    // }\n\n\n    //     const response = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=40.71&lon=-74.00&dt=20215101619&lang=en&appid=6693af864d042d45210a62d91db9b718`);\n    //     const userWeather = await response.json();\n    //     console.log(userWeather)\n    //     setWeather(userWeather);\n\n        // if (response.status === 200) {\n        //     return { success: true, data: response.json() };\n        // }\n\n        // return {success: false, error: response.statusText };\n\n    //     const response = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?latlng=40.71,-74.00&key=AIzaSyC98mWMfSiEOhKrhwhN04WW2dKb_2lT_QY`);\n    //     const userLocation = await response.json();\n    //     console.log(userLocation)\n    //     setUserLocation(userLocation);\n    // }\n\n\n    // useEffect (() => getWeather(), []);\n\n    return (\n\n        <div>\n            <h2 className=\"weathermain\">Current 5 Day Forecast</h2>\n            {/* <div className=\"weatherforcast\">\n                {weather.daily && weather.daily.slice(0, 7).map(d => (\n                    <div>\n                        <img\n                            src={`https://openweathermap.org/img/w/${d.weather[0].icon}.png`}\n                            alt={d.weather[0].main}\n                        />\n                        <div>{d.temp.max} / {d.temp.min}</div>\n                    </div>\n                ))}\n            </div> */}\n                <h2>Current Weather Conditions</h2>\n                {/* <div className=\"weatherdays\"> */}\n                <div id=\"openweathermap-widget-11\"></div>\n                <script src=\"//openweathermap.org/themes/openweathermap/assets/vendor/owm/js/d3.min.js\"></script>\n                <script> window.myWidgetParam ? window.myWidgetParam : window.myWidgetParam = [];  \n                    window.myWidgetParam.push({id=11,cityid='5128581',appid='6693af864d042d45210a62d91db9b718',units='imperial',containerid='openweathermap-widget-11'});  \n                    (function() \n                    let script = document.createElement('script');\n                    script.async = true;script.charset = \"utf-8\";\n                    script.src = \"//openweathermap.org/themes/openweathermap/assets/vendor/owm/js/weather-widget-generator.js\";\n                    var s = document.getElementsByTagName('script')[0];\n                    s.parentNode.insertBefore(script, s);  \n                    \n                    )();\n                </script>\n                    \n                    {/* <tr>\n                        <th>Clouds:</th>\n                        <th>{weather.daily && weather.current.clouds}</th><bk></bk>\n                    </tr>\n                    <tr>\n                        <th>Temp:</th>\n                        <th>{weather.daily && weather.current.temp}</th><bk></bk>\n                    </tr>\n                    <tr>\n                        <th>Feels like:</th>\n                        <th>{weather.daily && weather.current.feels_like}</th><bk></bk>\n                    </tr>\n                    <tr>\n                        <th>Humidity:</th>\n                        <th>{weather.daily && weather.current.humidity}</th><bk></bk>\n                    </tr>\n                    <tr>\n                        <th>Sunrise:</th>\n                        <th>{weather.daily && weather.current.sunrise}</th>\n                    </tr>\n                    <tr>\n                        <th>Sunset:</th>\n                        <th>{weather.daily && weather.current.sunset}</th>\n                    </tr>\n                    <tr>\n                        <th>UV Index:</th>\n                        <th>{weather.daily && weather.current.uvi}</th>\n                    </tr>\n                    <tr>\n                        <th>visibility:</th>\n                        <th>{weather.daily && weather.current.visibility}</th>\n                    </tr>\n                    \n                    <div>\n                        <tr>\n                            <th>Weather Outlook:</th><bk></bk>\n                            <th>{weather.daily && weather.current.weather[0].description}</th>\n                        </tr> */}\n                    {/* </div> */}\n            {/* </div> */}\n        </div>\n    );\n}       \n\n\nconst condition = authUser => !!authUser;\n\nexport default withAuthorization(condition)(WeatherPage);"]},"metadata":{},"sourceType":"module"}